#include <stdio.h>  
#include <stdlib.h> 
#define MAX 1000 

int count; 

void merge(int a[MAX], int low, int mid, int high)  
{ 
    int i, j, k, b[MAX];  
    i = low; 
    j = mid + 1; 
    k = low; 
    while (i <= mid && j <= high) 
    { 
        if (a[i] < a[j]) 
        { 
            b[k++] = a[i++]; 
        } 
        else 
        { 
            b[k++] = a[j++]; 
        } 
        count++; 
    } 
    while (i <= mid) 
    { 
        b[k++] = a[i++]; 
        count++; 
    } 
    while (j <= high) 
    { 
        b[k++] = a[j++]; 
        count++; 
    } 
    for (i = low; i <= high; i++) 
        a[i] = b[i];  
} 

void mergesort(int a[MAX], int low, int high)  
{ 
    int mid; 
    if (low < high) 
    { 
        int mid = (low + high) / 2; 
        mergesort(a, low, mid); 
        mergesort(a, mid + 1, high); 
        merge(a, low, mid, high); 
    } 
} 

int uniqueness(int arr[], int size)
{
    for(int i = 0; i < size - 1; i++)
    {
        if (arr[i] == arr[i + 1])
            return 0; // Not unique
    }
    return 1; // Unique
}

int main() 
{ 
    int i, j, n, a[MAX], b[MAX], c[MAX]; 
    int c1, c2, c3; 
    printf("\nMERGE SORT\n"); 
    printf("\nEnter the number of elements in the array - "); 
    scanf("%d", &n); 
    printf("\nEnter the elements of the array - "); 
    for (i = 0; i < n; i++) 
        scanf("%d", &a[i]); 
    count = 0; 
    mergesort(a, 0, n - 1); 
    printf("\nThe sorted elements of the array - "); 
    for (i = 0; i < n; i++) 
        printf("%d ", a[i]); 
    printf("\n\nThe number of counts- %d\n", count);  

    // Check uniqueness
    if (uniqueness(a, n))
        printf("All elements in the array are unique.\n");
    else
        printf("There are duplicate elements in the array.\n");

    
    return 0; 
}   
